<?php
/**
 * Deal
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  NFTStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * NFT Storage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NFTStorage\Model;

use \ArrayAccess;
use \NFTStorage\ObjectSerializer;

/**
 * Deal Class Doc Comment
 *
 * @category Class
 * @package  NFTStorage
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Deal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Deal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'batch_root_cid' => 'string',
        'last_change' => 'string',
        'miner' => 'string',
        'network' => 'string',
        'piece_cid' => 'string',
        'status' => 'string',
        'status_text' => 'string',
        'chain_deal_id' => 'float',
        'deal_activation' => 'string',
        'deal_expiration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'batch_root_cid' => null,
        'last_change' => null,
        'miner' => null,
        'network' => null,
        'piece_cid' => null,
        'status' => null,
        'status_text' => null,
        'chain_deal_id' => null,
        'deal_activation' => null,
        'deal_expiration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_root_cid' => 'batchRootCid',
        'last_change' => 'lastChange',
        'miner' => 'miner',
        'network' => 'network',
        'piece_cid' => 'pieceCid',
        'status' => 'status',
        'status_text' => 'statusText',
        'chain_deal_id' => 'chainDealID',
        'deal_activation' => 'dealActivation',
        'deal_expiration' => 'dealExpiration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_root_cid' => 'setBatchRootCid',
        'last_change' => 'setLastChange',
        'miner' => 'setMiner',
        'network' => 'setNetwork',
        'piece_cid' => 'setPieceCid',
        'status' => 'setStatus',
        'status_text' => 'setStatusText',
        'chain_deal_id' => 'setChainDealId',
        'deal_activation' => 'setDealActivation',
        'deal_expiration' => 'setDealExpiration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_root_cid' => 'getBatchRootCid',
        'last_change' => 'getLastChange',
        'miner' => 'getMiner',
        'network' => 'getNetwork',
        'piece_cid' => 'getPieceCid',
        'status' => 'getStatus',
        'status_text' => 'getStatusText',
        'chain_deal_id' => 'getChainDealId',
        'deal_activation' => 'getDealActivation',
        'deal_expiration' => 'getDealExpiration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const NETWORK_NERPANET = 'nerpanet';
    const NETWORK_MAINNET = 'mainnet';
    const STATUS_QUEUED = 'queued';
    const STATUS_PROPOSING = 'proposing';
    const STATUS_ACCEPTED = 'accepted';
    const STATUS_FAILED = 'failed';
    const STATUS_ACTIVE = 'active';
    const STATUS_PUBLISHED = 'published';
    const STATUS_TERMINATED = 'terminated';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNetworkAllowableValues()
    {
        return [
            self::NETWORK_NERPANET,
            self::NETWORK_MAINNET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_QUEUED,
            self::STATUS_PROPOSING,
            self::STATUS_ACCEPTED,
            self::STATUS_FAILED,
            self::STATUS_ACTIVE,
            self::STATUS_PUBLISHED,
            self::STATUS_TERMINATED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_root_cid'] = $data['batch_root_cid'] ?? null;
        $this->container['last_change'] = $data['last_change'] ?? null;
        $this->container['miner'] = $data['miner'] ?? null;
        $this->container['network'] = $data['network'] ?? null;
        $this->container['piece_cid'] = $data['piece_cid'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_text'] = $data['status_text'] ?? null;
        $this->container['chain_deal_id'] = $data['chain_deal_id'] ?? null;
        $this->container['deal_activation'] = $data['deal_activation'] ?? null;
        $this->container['deal_expiration'] = $data['deal_expiration'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['last_change'] === null) {
            $invalidProperties[] = "'last_change' can't be null";
        }
        $allowedValues = $this->getNetworkAllowableValues();
        if (!is_null($this->container['network']) && !in_array($this->container['network'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'network', must be one of '%s'",
                $this->container['network'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batch_root_cid
     *
     * @return string|null
     */
    public function getBatchRootCid()
    {
        return $this->container['batch_root_cid'];
    }

    /**
     * Sets batch_root_cid
     *
     * @param string|null $batch_root_cid batch_root_cid
     *
     * @return self
     */
    public function setBatchRootCid($batch_root_cid)
    {
        $this->container['batch_root_cid'] = $batch_root_cid;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets miner
     *
     * @return string|null
     */
    public function getMiner()
    {
        return $this->container['miner'];
    }

    /**
     * Sets miner
     *
     * @param string|null $miner Miner ID
     *
     * @return self
     */
    public function setMiner($miner)
    {
        $this->container['miner'] = $miner;

        return $this;
    }

    /**
     * Gets network
     *
     * @return string|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param string|null $network Filecoin network for this Deal
     *
     * @return self
     */
    public function setNetwork($network)
    {
        $allowedValues = $this->getNetworkAllowableValues();
        if (!is_null($network) && !in_array($network, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'network', must be one of '%s'",
                    $network,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets piece_cid
     *
     * @return string|null
     */
    public function getPieceCid()
    {
        return $this->container['piece_cid'];
    }

    /**
     * Sets piece_cid
     *
     * @param string|null $piece_cid Piece CID string
     *
     * @return self
     */
    public function setPieceCid($piece_cid)
    {
        $this->container['piece_cid'] = $piece_cid;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Deal status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string|null
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string|null $status_text Deal status description.
     *
     * @return self
     */
    public function setStatusText($status_text)
    {
        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets chain_deal_id
     *
     * @return float|null
     */
    public function getChainDealId()
    {
        return $this->container['chain_deal_id'];
    }

    /**
     * Sets chain_deal_id
     *
     * @param float|null $chain_deal_id Identifier for the deal stored on chain.
     *
     * @return self
     */
    public function setChainDealId($chain_deal_id)
    {
        $this->container['chain_deal_id'] = $chain_deal_id;

        return $this;
    }

    /**
     * Gets deal_activation
     *
     * @return string|null
     */
    public function getDealActivation()
    {
        return $this->container['deal_activation'];
    }

    /**
     * Sets deal_activation
     *
     * @param string|null $deal_activation This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setDealActivation($deal_activation)
    {
        $this->container['deal_activation'] = $deal_activation;

        return $this;
    }

    /**
     * Gets deal_expiration
     *
     * @return string|null
     */
    public function getDealExpiration()
    {
        return $this->container['deal_expiration'];
    }

    /**
     * Sets deal_expiration
     *
     * @param string|null $deal_expiration This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: YYYY-MM-DDTHH:MM:SSZ.
     *
     * @return self
     */
    public function setDealExpiration($deal_expiration)
    {
        $this->container['deal_expiration'] = $deal_expiration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


